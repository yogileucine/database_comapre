{"uid":"c7ddbc90f85686d8","name":"test_compare_database","fullName":"tests.database.test_compare_db.TestDataBaseConnection#test_compare_database","historyId":"1b1a441f4a583b1c3e8ee2d77b68ba9e","time":{"start":1733811590633,"stop":1733812270859,"duration":680226},"status":"failed","statusMessage":"AssertionError: amneal_dwi & amneal_migrated_dwi Database tables details are not matching\nassert False","statusTrace":"self = <test_compare_db.TestDataBaseConnection object at 0x000001E8A25557D0>\n\n    @pytest.mark.compare_database\n    def test_compare_database(self):\n        assert_flag = True\n        data_match = []\n        missing_tables = []\n        missing_column = []\n        column_data_type = []\n        sql_type_error_query_list = []\n        type_error_col = []\n    \n        with open('util/host_detail.json') as file:\n            data = json.load(file)\n    \n        old_database = data[\"old_dbname\"]\n        new_database = data[\"new_dbname\"]\n    \n        for sql_query in Sql:\n            data_base_connect = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                               sql_query.value)\n            data_base_connect1 = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                                sql_query.value)\n    \n            old_tables = set(data_base_connect[\"sql_query_list\"])\n            new_tables = set(data_base_connect1[\"sql_query_list\"])\n    \n            # Tables in old database but not in new database\n            tables_in_old_not_in_new = old_tables - new_tables\n            for table in tables_in_old_not_in_new:\n                missing_tables.append(f\"Database: {old_database}, Table Name: {table.replace('select * from ', '')}\")\n    \n            # Tables in new database but not in old database\n            tables_in_new_not_in_old = new_tables - old_tables\n            for table in tables_in_new_not_in_old:\n                missing_tables.append(f\"Database: {new_database}, Table Name: {table.replace('select * from ', '')}\")\n    \n            # Tables present in both databases\n            data_query_list = list(old_tables & new_tables)\n    \n            for sql in data_query_list:\n    \n                list_col = []\n                try:\n                    old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(old_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n                except Exception as e:\n                    assert_flag = False\n                    missing_tables.append(\n                        f\"Error fetching data from {old_database} for table {sql.replace('select * from ', '')}: {str(e)}\")\n                    continue\n    \n                try:\n                    new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(new_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n                except Exception as e:\n                    assert_flag = False\n                    missing_tables.append(\n                        f\"Error fetching data from {new_database} for table {sql.replace('select * from ', '')}: {str(e)}\")\n                    continue\n    \n                if new_data is None or old_data is None:\n                    assert_flag = False\n                    missing_tables.append(f\"Data retrieval failed for table: {sql.replace('select * from ', '')}\")\n                    continue\n    \n                if new_data.columns.difference(old_data.columns).any():\n                    assert_flag = False\n                    diff_col = new_data.columns.difference(old_data.columns)\n                    missing_column.append(\"Instance: \" + str(old_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                if old_data.columns.difference(new_data.columns).any():\n                    assert_flag = False\n                    diff_col = old_data.columns.difference(new_data.columns)\n                    missing_column.append(\"Instance: \" + str(new_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                try:\n                    filter_new_data = new_data.loc[:, ~new_data.columns.isin(list_col)]\n                    filter_old_data = old_data.loc[:, ~old_data.columns.isin(list_col)]\n    \n                    df_diff = None\n                    if not filter_new_data.equals(filter_old_data):\n                        try:\n                            df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n                            df_diff = df_diff[df_diff['_merge'] != 'both']\n                            df_diff = df_diff.rename(columns={'_merge': 'database'})\n                            df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only',\n                                                                                  str(new_database)).str.replace(\n                                'right_only', str(old_database))\n                        except TypeError:\n                            sql_type_error_query = \"select * from \" + sql.replace('select * from ', '')\n                            sql_type_error_query_list.append(sql_type_error_query)\n                            allure.attach(\"Table Name : \" + str(sql.replace('select * from ', '')),\n                                          name='Type Error in Database Table',\n                                          attachment_type=allure.attachment_type.TEXT)\n                            pass\n    \n                        if df_diff is not None and df_diff[\"database\"].isin(\n                                [str(old_database), str(new_database)]).any():\n                            assert_flag = False\n                            df_diff_html = df_diff.to_html()\n                            allure.attach(df_diff_html, name='Difference Between Two Database tables : ' +\n                                                             str(sql.replace('select * from ', '')),\n                                          attachment_type=allure.attachment_type.HTML)\n                    else:\n                        data_match.append('Database Data Match : ' + str(sql.replace('select * from ', '')))\n                except Exception as e:\n                    print(e)\n    \n            for sql_data_type in data_base_connect[\"sql_data_type_query_list\"]:\n                old_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database), sql_data_type)[\n                        \"db_data\"]\n                new_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database), sql_data_type)[\n                        \"db_data\"]\n                common_columns = None\n                if old_data is not None and new_data is not None:\n                    try:\n                        common_columns = set(old_data['column_name']).intersection(set(new_data['column_name']))\n                    except Exception as e:\n                        print(e)\n                        continue\n                else:\n                    allure.attach(f\"Missing data for table: {sql_data_type}\", name='Missing Data',\n                                  attachment_type=allure.attachment_type.TEXT)\n    \n                try:\n                    for column in common_columns:\n                        db_type1 = old_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                        db_type2 = new_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                        if db_type1 != db_type2:\n                            assert_flag = False\n                            sql_table = \"select column_name, data_type from information_schema.columns where table_name = \"\n                            df = f\"From Table: {str(sql_data_type.replace(sql_table, ''))}, Column '{column}' has \" \\\n                                 f\"different datatypes: Database 1: {db_type1},  Database 2: {db_type2}\"\n                            column_data_type.append(df)\n                except Exception as e:\n                    print(e)\n    \n            def dict_to_tuple(d):\n                if isinstance(d, dict):\n                    result = []\n                    for k, v in d.items():\n                        tuple_v = dict_to_tuple(v)\n                        result.append((k, tuple_v))\n                    return tuple(result)\n                elif isinstance(d, list):\n                    return tuple(dict_to_tuple(x) for x in d)\n                else:\n                    return d\n    \n            print(sql_type_error_query_list, \"error list\")\n    \n            for sql_type in sql_type_error_query_list:\n                old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                          sql_type)[\"db_data\"]\n                new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                          sql_type)[\"db_data\"]\n    \n                old_col_to_tuple = old_data.applymap(dict_to_tuple)\n                new_col_to_tuple = new_data.applymap(dict_to_tuple)\n    \n                diff_col = old_col_to_tuple.columns.difference(new_col_to_tuple.columns)\n    \n                type_error_col.extend(diff_col.values)\n    \n                filter_old_data = old_col_to_tuple.loc[:, ~old_col_to_tuple.columns.isin(type_error_col)]\n                filter_new_data = new_col_to_tuple.loc[:, ~new_col_to_tuple.columns.isin(type_error_col)]\n    \n                df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n    \n                df_diff = df_diff[df_diff[\"_merge\"] != \"both\"]\n                df_diff = df_diff.rename(columns={'_merge': 'database'})\n                df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only', str(new_database)).str.replace(\n                    'right_only', str(old_database))\n    \n                allure.attach(df_diff.to_html(), name='Difference between two Database tables : ' +\n                                                      str(sql_type.replace('select * from ', '')),\n                              attachment_type=allure.attachment_type.HTML)\n    \n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(old_database))\n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(new_database))\n    \n            database_data_match = '\\n'.join(data_match)\n            allure.attach(str(database_data_match), name='Database Data Match',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_tables = '\\n'.join(missing_tables)\n            allure.attach(str(missing_tables), name='Missing Tables from database',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_column = '\\n'.join(missing_column)\n            allure.attach(str(missing_column), name='Missing Column in Database table',\n                          attachment_type=allure.attachment_type.TEXT)\n            database_column_datatype = '\\n'.join(column_data_type)\n            allure.attach(str(database_column_datatype), name='Database Columns Datatype not matching',\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            if len(missing_tables) != 0:\n>               assert assert_flag, f\"{old_database} & {new_database} Database tables details are not matching\"\nE               AssertionError: amneal_dwi & amneal_migrated_dwi Database tables details are not matching\nE               assert False\n\ntests\\database\\test_compare_db.py:224: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"load_env","time":{"start":1733811590633,"stop":1733811590633,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: amneal_dwi & amneal_migrated_dwi Database tables details are not matching\nassert False","statusTrace":"self = <test_compare_db.TestDataBaseConnection object at 0x000001E8A25557D0>\n\n    @pytest.mark.compare_database\n    def test_compare_database(self):\n        assert_flag = True\n        data_match = []\n        missing_tables = []\n        missing_column = []\n        column_data_type = []\n        sql_type_error_query_list = []\n        type_error_col = []\n    \n        with open('util/host_detail.json') as file:\n            data = json.load(file)\n    \n        old_database = data[\"old_dbname\"]\n        new_database = data[\"new_dbname\"]\n    \n        for sql_query in Sql:\n            data_base_connect = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                               sql_query.value)\n            data_base_connect1 = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                                sql_query.value)\n    \n            old_tables = set(data_base_connect[\"sql_query_list\"])\n            new_tables = set(data_base_connect1[\"sql_query_list\"])\n    \n            # Tables in old database but not in new database\n            tables_in_old_not_in_new = old_tables - new_tables\n            for table in tables_in_old_not_in_new:\n                missing_tables.append(f\"Database: {old_database}, Table Name: {table.replace('select * from ', '')}\")\n    \n            # Tables in new database but not in old database\n            tables_in_new_not_in_old = new_tables - old_tables\n            for table in tables_in_new_not_in_old:\n                missing_tables.append(f\"Database: {new_database}, Table Name: {table.replace('select * from ', '')}\")\n    \n            # Tables present in both databases\n            data_query_list = list(old_tables & new_tables)\n    \n            for sql in data_query_list:\n    \n                list_col = []\n                try:\n                    old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(old_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n                except Exception as e:\n                    assert_flag = False\n                    missing_tables.append(\n                        f\"Error fetching data from {old_database} for table {sql.replace('select * from ', '')}: {str(e)}\")\n                    continue\n    \n                try:\n                    new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(new_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n                except Exception as e:\n                    assert_flag = False\n                    missing_tables.append(\n                        f\"Error fetching data from {new_database} for table {sql.replace('select * from ', '')}: {str(e)}\")\n                    continue\n    \n                if new_data is None or old_data is None:\n                    assert_flag = False\n                    missing_tables.append(f\"Data retrieval failed for table: {sql.replace('select * from ', '')}\")\n                    continue\n    \n                if new_data.columns.difference(old_data.columns).any():\n                    assert_flag = False\n                    diff_col = new_data.columns.difference(old_data.columns)\n                    missing_column.append(\"Instance: \" + str(old_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                if old_data.columns.difference(new_data.columns).any():\n                    assert_flag = False\n                    diff_col = old_data.columns.difference(new_data.columns)\n                    missing_column.append(\"Instance: \" + str(new_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                try:\n                    filter_new_data = new_data.loc[:, ~new_data.columns.isin(list_col)]\n                    filter_old_data = old_data.loc[:, ~old_data.columns.isin(list_col)]\n    \n                    df_diff = None\n                    if not filter_new_data.equals(filter_old_data):\n                        try:\n                            df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n                            df_diff = df_diff[df_diff['_merge'] != 'both']\n                            df_diff = df_diff.rename(columns={'_merge': 'database'})\n                            df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only',\n                                                                                  str(new_database)).str.replace(\n                                'right_only', str(old_database))\n                        except TypeError:\n                            sql_type_error_query = \"select * from \" + sql.replace('select * from ', '')\n                            sql_type_error_query_list.append(sql_type_error_query)\n                            allure.attach(\"Table Name : \" + str(sql.replace('select * from ', '')),\n                                          name='Type Error in Database Table',\n                                          attachment_type=allure.attachment_type.TEXT)\n                            pass\n    \n                        if df_diff is not None and df_diff[\"database\"].isin(\n                                [str(old_database), str(new_database)]).any():\n                            assert_flag = False\n                            df_diff_html = df_diff.to_html()\n                            allure.attach(df_diff_html, name='Difference Between Two Database tables : ' +\n                                                             str(sql.replace('select * from ', '')),\n                                          attachment_type=allure.attachment_type.HTML)\n                    else:\n                        data_match.append('Database Data Match : ' + str(sql.replace('select * from ', '')))\n                except Exception as e:\n                    print(e)\n    \n            for sql_data_type in data_base_connect[\"sql_data_type_query_list\"]:\n                old_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database), sql_data_type)[\n                        \"db_data\"]\n                new_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database), sql_data_type)[\n                        \"db_data\"]\n                common_columns = None\n                if old_data is not None and new_data is not None:\n                    try:\n                        common_columns = set(old_data['column_name']).intersection(set(new_data['column_name']))\n                    except Exception as e:\n                        print(e)\n                        continue\n                else:\n                    allure.attach(f\"Missing data for table: {sql_data_type}\", name='Missing Data',\n                                  attachment_type=allure.attachment_type.TEXT)\n    \n                try:\n                    for column in common_columns:\n                        db_type1 = old_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                        db_type2 = new_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                        if db_type1 != db_type2:\n                            assert_flag = False\n                            sql_table = \"select column_name, data_type from information_schema.columns where table_name = \"\n                            df = f\"From Table: {str(sql_data_type.replace(sql_table, ''))}, Column '{column}' has \" \\\n                                 f\"different datatypes: Database 1: {db_type1},  Database 2: {db_type2}\"\n                            column_data_type.append(df)\n                except Exception as e:\n                    print(e)\n    \n            def dict_to_tuple(d):\n                if isinstance(d, dict):\n                    result = []\n                    for k, v in d.items():\n                        tuple_v = dict_to_tuple(v)\n                        result.append((k, tuple_v))\n                    return tuple(result)\n                elif isinstance(d, list):\n                    return tuple(dict_to_tuple(x) for x in d)\n                else:\n                    return d\n    \n            print(sql_type_error_query_list, \"error list\")\n    \n            for sql_type in sql_type_error_query_list:\n                old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                          sql_type)[\"db_data\"]\n                new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                          sql_type)[\"db_data\"]\n    \n                old_col_to_tuple = old_data.applymap(dict_to_tuple)\n                new_col_to_tuple = new_data.applymap(dict_to_tuple)\n    \n                diff_col = old_col_to_tuple.columns.difference(new_col_to_tuple.columns)\n    \n                type_error_col.extend(diff_col.values)\n    \n                filter_old_data = old_col_to_tuple.loc[:, ~old_col_to_tuple.columns.isin(type_error_col)]\n                filter_new_data = new_col_to_tuple.loc[:, ~new_col_to_tuple.columns.isin(type_error_col)]\n    \n                df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n    \n                df_diff = df_diff[df_diff[\"_merge\"] != \"both\"]\n                df_diff = df_diff.rename(columns={'_merge': 'database'})\n                df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only', str(new_database)).str.replace(\n                    'right_only', str(old_database))\n    \n                allure.attach(df_diff.to_html(), name='Difference between two Database tables : ' +\n                                                      str(sql_type.replace('select * from ', '')),\n                              attachment_type=allure.attachment_type.HTML)\n    \n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(old_database))\n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(new_database))\n    \n            database_data_match = '\\n'.join(data_match)\n            allure.attach(str(database_data_match), name='Database Data Match',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_tables = '\\n'.join(missing_tables)\n            allure.attach(str(missing_tables), name='Missing Tables from database',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_column = '\\n'.join(missing_column)\n            allure.attach(str(missing_column), name='Missing Column in Database table',\n                          attachment_type=allure.attachment_type.TEXT)\n            database_column_datatype = '\\n'.join(column_data_type)\n            allure.attach(str(database_column_datatype), name='Database Columns Datatype not matching',\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            if len(missing_tables) != 0:\n>               assert assert_flag, f\"{old_database} & {new_database} Database tables details are not matching\"\nE               AssertionError: amneal_dwi & amneal_migrated_dwi Database tables details are not matching\nE               assert False\n\ntests\\database\\test_compare_db.py:224: AssertionError","steps":[],"attachments":[{"uid":"1d60158f92022d97","name":"Difference Between Two Database tables : databasechangelog","source":"1d60158f92022d97.html","type":"text/html","size":43955},{"uid":"c76ac5ac5c7688c3","name":"Difference Between Two Database tables : facilities","source":"c76ac5ac5c7688c3.html","type":"text/html","size":2540},{"uid":"a4685e2a106664cf","name":"Type Error in Database Table","source":"a4685e2a106664cf.txt","type":"text/plain","size":29},{"uid":"e943733be10d80f6","name":"Difference Between Two Database tables : users","source":"e943733be10d80f6.html","type":"text/html","size":151304},{"uid":"3cfb9ee1b55932b9","name":"Type Error in Database Table","source":"3cfb9ee1b55932b9.txt","type":"text/plain","size":23},{"uid":"134109f86c485a27","name":"Difference Between Two Database tables : email_templates","source":"134109f86c485a27.html","type":"text/html","size":787628},{"uid":"abe4d6bf8d2819e1","name":"Type Error in Database Table","source":"abe4d6bf8d2819e1.txt","type":"text/plain","size":23},{"uid":"3cbcf84b5b5ea34d","name":"Type Error in Database Table","source":"3cbcf84b5b5ea34d.txt","type":"text/plain","size":23},{"uid":"122a588a0ef1562d","name":"Type Error in Database Table","source":"122a588a0ef1562d.txt","type":"text/plain","size":24},{"uid":"b9e472dac8a45d91","name":"Difference Between Two Database tables : task_execution_timers","source":"b9e472dac8a45d91.html","type":"text/html","size":4053345},{"uid":"121a00063dd08563","name":"Difference between two Database tables : parameter_values","source":"121a00063dd08563.html","type":"text/html","size":764},{"uid":"1b2332954c34c1c8","name":"Difference between two Database tables : checklists","source":"1b2332954c34c1c8.html","type":"text/html","size":660},{"uid":"2b686705f530e8fc","name":"Difference between two Database tables : job_audits","source":"2b686705f530e8fc.html","type":"text/html","size":422},{"uid":"74a01435a7c611c2","name":"Difference between two Database tables : parameters","source":"74a01435a7c611c2.html","type":"text/html","size":1249599},{"uid":"5d96f70011a9366","name":"Difference between two Database tables : automations","source":"5d96f70011a9366.html","type":"text/html","size":249635},{"uid":"7a6673e1f1d87ac9","name":"Database Data Match","source":"7a6673e1f1d87ac9.txt","type":"text/plain","size":1950},{"uid":"da6ef15dc352e35e","name":"Missing Tables from database","source":"da6ef15dc352e35e.txt","type":"text/plain","size":2193},{"uid":"c90d080f8baa5048","name":"Missing Column in Database table","source":"c90d080f8baa5048.txt","type":"text/plain","size":2010},{"uid":"3277f59de683be11","name":"Database Columns Datatype not matching","source":"3277f59de683be11.txt","type":"text/plain","size":127}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"tag","value":"compare_database"},{"name":"parentSuite","value":"tests.database"},{"name":"suite","value":"test_compare_db"},{"name":"subSuite","value":"TestDataBaseConnection"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26576-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.database.test_compare_db"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["compare_database"]},"source":"c7ddbc90f85686d8.json","parameterValues":[]}