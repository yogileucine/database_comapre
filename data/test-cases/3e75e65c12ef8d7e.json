{"uid":"3e75e65c12ef8d7e","name":"test_compare_database","fullName":"tests.database.test_db.TestDataBaseConnection#test_compare_database","historyId":"f05e8ceffdd8028971962ff0d41322f8","time":{"start":1699083335427,"stop":1699083348724,"duration":13297},"status":"failed","statusMessage":"AssertionError:  dwi_junaid + '&' + dwi_siba Database tables details are not matching\nassert False","statusTrace":"self = <test_db.TestDataBaseConnection object at 0x000002996A5A7650>\n\n    @pytest.mark.compare_database\n    def test_compare_database(self):\n        assert_flag = True\n        data_match = []\n        missing_tables = []\n        missing_column = []\n        column_data_type = []\n        sql_type_error_query_list = []\n        type_error_col = []\n    \n        with open('util/host_detail.json') as file:\n            data = json.load(file)\n    \n        old_database = data[\"old_dbname\"]\n        new_database = data[\"new_dbname\"]\n    \n        for sql_query in Sql:\n            data_base_connect = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                               sql_query.value)\n            data_base_connect1 = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                                sql_query.value)\n    \n            data_query_list = list(set(data_base_connect1[\"sql_query_list\"] + data_base_connect[\"sql_query_list\"]))\n    \n            for sql in data_query_list:\n    \n                list_col = []\n                try:\n                    old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(old_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n    \n                    continue\n    \n                try:\n                    new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(new_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n    \n                if new_data.columns.difference(old_data.columns).any():\n                    assert_flag = False\n                    diff_col = new_data.columns.difference(old_data.columns)\n                    missing_column.append(\"Instance: \" + str(old_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                if old_data.columns.difference(new_data.columns).any():\n                    assert_flag = False\n                    diff_col = old_data.columns.difference(new_data.columns)\n                    missing_column.append(\"Instance: \" + str(new_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                filter_new_data = new_data.loc[:, ~new_data.columns.isin(list_col)]\n                filter_old_data = old_data.loc[:, ~old_data.columns.isin(list_col)]\n    \n                df_diff = None\n                if not filter_new_data.equals(filter_old_data):\n                    try:\n                        df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n                        df_diff = df_diff[df_diff['_merge'] != 'both']\n                        df_diff = df_diff.rename(columns={'_merge': 'database'})\n                        df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only',\n                                                                              str(new_database)).str.replace(\n                            'right_only', str(old_database))\n                    except TypeError:\n                        sql_type_error_query = \"select * from \" + sql.replace('select * from ', '')\n                        sql_type_error_query_list.append(sql_type_error_query)\n                        allure.attach(\"Table Name : \" + str(sql.replace('select * from ', '')),\n                                      name='Type Error in Database Table', attachment_type=allure.attachment_type.TEXT)\n                        pass\n    \n                    if df_diff is not None and df_diff[\"database\"].isin([str(old_database), str(new_database)]).any():\n                        assert_flag = False\n                        df_diff_html = df_diff.to_html()\n                        allure.attach(df_diff_html, name='Difference Between Two Database tables : ' +\n                                                         str(sql.replace('select * from ', '')),\n                                      attachment_type=allure.attachment_type.HTML)\n                else:\n                    data_match.append('Database Data Match : ' + str(sql.replace('select * from ', '')))\n    \n            for sql_data_type in data_base_connect[\"sql_data_type_query_list\"]:\n                old_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database), sql_data_type)[\n                        \"db_data\"]\n                new_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database), sql_data_type)[\n                        \"db_data\"]\n    \n                common_columns = set(old_data['column_name']).intersection(set(new_data['column_name']))\n    \n                for column in common_columns:\n                    db_type1 = old_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                    db_type2 = new_data.loc[new_data['column_name'] == column, 'data_type'].iloc[0]\n                    if db_type1 != db_type2:\n                        assert_flag = False\n                        sql_table = \"select column_name, data_type from information_schema.columns where table_name = \"\n                        df = f\"From Table: {str(sql_data_type.replace(sql_table, ''))}, Column '{column}' has \" \\\n                             f\"different datatypes: Database 1: {db_type1},  Database 2: {db_type2}\"\n                        column_data_type.append(df)\n    \n            def dict_to_tuple(d):\n                if isinstance(d, dict):\n                    result = []\n                    for k, v in d.items():\n                        tuple_v = dict_to_tuple(v)\n                        result.append((k, tuple_v))\n                    return tuple(result)\n                elif isinstance(d, list):\n                    return tuple(dict_to_tuple(x) for x in d)\n                else:\n                    return d\n    \n            for sql_type in sql_type_error_query_list:\n                old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                          sql_type)[\"db_data\"]\n                new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                          sql_type)[\"db_data\"]\n    \n                old_col_to_tuple = old_data.applymap(dict_to_tuple)\n                new_col_to_tuple = new_data.applymap(dict_to_tuple)\n    \n                diff_col = old_col_to_tuple.columns.difference(new_col_to_tuple.columns)\n    \n                type_error_col.extend(diff_col.values)\n    \n                filter_old_data = old_col_to_tuple.loc[:, ~old_col_to_tuple.columns.isin(type_error_col)]\n                filter_new_data = new_col_to_tuple.loc[:, ~new_col_to_tuple.columns.isin(type_error_col)]\n    \n                df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n    \n                # abc = pd.concat([])\n    \n                df_diff = df_diff[df_diff[\"_merge\"] != \"both\"]\n                df_diff = df_diff.rename(columns={'_merge': 'database'})\n                df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only', str(new_database)).str.replace(\n                    'right_only', str(old_database))\n    \n                allure.attach(df_diff.to_html(), name='Difference between two Database tables : ' +\n                                                      str(sql_type.replace('select * from ', '')),\n                              attachment_type=allure.attachment_type.HTML)\n    \n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(old_database))\n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(new_database))\n    \n            database_data_match = '\\n'.join(data_match)\n            allure.attach(str(database_data_match), name='Database Data Match',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_tables = '\\n'.join(missing_tables)\n            allure.attach(str(missing_tables), name='Missing Tables from database',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_column = '\\n'.join(missing_column)\n            allure.attach(str(missing_column), name='Missing Column in Database table',\n                          attachment_type=allure.attachment_type.TEXT)\n            database_column_datatype = '\\n'.join(column_data_type)\n            allure.attach(str(database_column_datatype), name='Database Columns Datatype not matching',\n                          attachment_type=allure.attachment_type.TEXT)\n            if len(missing_tables) != 0:\n>               assert assert_flag, f\" {old_database} + '&' + {new_database} Database tables details are not matching\"\nE               AssertionError:  dwi_junaid + '&' + dwi_siba Database tables details are not matching\nE               assert False\n\ntests\\database\\test_db.py:179: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"load_env","time":{"start":1699083335425,"stop":1699083335426,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError:  dwi_junaid + '&' + dwi_siba Database tables details are not matching\nassert False","statusTrace":"self = <test_db.TestDataBaseConnection object at 0x000002996A5A7650>\n\n    @pytest.mark.compare_database\n    def test_compare_database(self):\n        assert_flag = True\n        data_match = []\n        missing_tables = []\n        missing_column = []\n        column_data_type = []\n        sql_type_error_query_list = []\n        type_error_col = []\n    \n        with open('util/host_detail.json') as file:\n            data = json.load(file)\n    \n        old_database = data[\"old_dbname\"]\n        new_database = data[\"new_dbname\"]\n    \n        for sql_query in Sql:\n            data_base_connect = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                               sql_query.value)\n            data_base_connect1 = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                                sql_query.value)\n    \n            data_query_list = list(set(data_base_connect1[\"sql_query_list\"] + data_base_connect[\"sql_query_list\"]))\n    \n            for sql in data_query_list:\n    \n                list_col = []\n                try:\n                    old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(old_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n    \n                    continue\n    \n                try:\n                    new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                              sql)[\"db_data\"]\n                except psycopg2.errors.UndefinedTable:\n                    assert_flag = False\n                    missing_tables.append(\"Database: \" + str(new_database) + \",\" + \" Table Name : \" + str(\n                        sql.replace('select * from ', '')))\n                    continue\n    \n                if new_data.columns.difference(old_data.columns).any():\n                    assert_flag = False\n                    diff_col = new_data.columns.difference(old_data.columns)\n                    missing_column.append(\"Instance: \" + str(old_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                if old_data.columns.difference(new_data.columns).any():\n                    assert_flag = False\n                    diff_col = old_data.columns.difference(new_data.columns)\n                    missing_column.append(\"Instance: \" + str(new_database) + \",\" + \" Column: \" + str(\n                        diff_col.values) + \",\" + ' Missing Column in Database table : ' + str(\n                        sql.replace('select * from ', '')))\n    \n                filter_new_data = new_data.loc[:, ~new_data.columns.isin(list_col)]\n                filter_old_data = old_data.loc[:, ~old_data.columns.isin(list_col)]\n    \n                df_diff = None\n                if not filter_new_data.equals(filter_old_data):\n                    try:\n                        df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n                        df_diff = df_diff[df_diff['_merge'] != 'both']\n                        df_diff = df_diff.rename(columns={'_merge': 'database'})\n                        df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only',\n                                                                              str(new_database)).str.replace(\n                            'right_only', str(old_database))\n                    except TypeError:\n                        sql_type_error_query = \"select * from \" + sql.replace('select * from ', '')\n                        sql_type_error_query_list.append(sql_type_error_query)\n                        allure.attach(\"Table Name : \" + str(sql.replace('select * from ', '')),\n                                      name='Type Error in Database Table', attachment_type=allure.attachment_type.TEXT)\n                        pass\n    \n                    if df_diff is not None and df_diff[\"database\"].isin([str(old_database), str(new_database)]).any():\n                        assert_flag = False\n                        df_diff_html = df_diff.to_html()\n                        allure.attach(df_diff_html, name='Difference Between Two Database tables : ' +\n                                                         str(sql.replace('select * from ', '')),\n                                      attachment_type=allure.attachment_type.HTML)\n                else:\n                    data_match.append('Database Data Match : ' + str(sql.replace('select * from ', '')))\n    \n            for sql_data_type in data_base_connect[\"sql_data_type_query_list\"]:\n                old_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database), sql_data_type)[\n                        \"db_data\"]\n                new_data = \\\n                    DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database), sql_data_type)[\n                        \"db_data\"]\n    \n                common_columns = set(old_data['column_name']).intersection(set(new_data['column_name']))\n    \n                for column in common_columns:\n                    db_type1 = old_data.loc[old_data['column_name'] == column, 'data_type'].iloc[0]\n                    db_type2 = new_data.loc[new_data['column_name'] == column, 'data_type'].iloc[0]\n                    if db_type1 != db_type2:\n                        assert_flag = False\n                        sql_table = \"select column_name, data_type from information_schema.columns where table_name = \"\n                        df = f\"From Table: {str(sql_data_type.replace(sql_table, ''))}, Column '{column}' has \" \\\n                             f\"different datatypes: Database 1: {db_type1},  Database 2: {db_type2}\"\n                        column_data_type.append(df)\n    \n            def dict_to_tuple(d):\n                if isinstance(d, dict):\n                    result = []\n                    for k, v in d.items():\n                        tuple_v = dict_to_tuple(v)\n                        result.append((k, tuple_v))\n                    return tuple(result)\n                elif isinstance(d, list):\n                    return tuple(dict_to_tuple(x) for x in d)\n                else:\n                    return d\n    \n            for sql_type in sql_type_error_query_list:\n                old_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(old_database),\n                                                          sql_type)[\"db_data\"]\n                new_data = DataBaseConnection.get_db_data(DataBaseConnection.setup_connection(new_database),\n                                                          sql_type)[\"db_data\"]\n    \n                old_col_to_tuple = old_data.applymap(dict_to_tuple)\n                new_col_to_tuple = new_data.applymap(dict_to_tuple)\n    \n                diff_col = old_col_to_tuple.columns.difference(new_col_to_tuple.columns)\n    \n                type_error_col.extend(diff_col.values)\n    \n                filter_old_data = old_col_to_tuple.loc[:, ~old_col_to_tuple.columns.isin(type_error_col)]\n                filter_new_data = new_col_to_tuple.loc[:, ~new_col_to_tuple.columns.isin(type_error_col)]\n    \n                df_diff = pd.merge(filter_new_data, filter_old_data, how=\"outer\", indicator=True)\n    \n                # abc = pd.concat([])\n    \n                df_diff = df_diff[df_diff[\"_merge\"] != \"both\"]\n                df_diff = df_diff.rename(columns={'_merge': 'database'})\n                df_diff[\"database\"] = df_diff[\"database\"].str.replace('left_only', str(new_database)).str.replace(\n                    'right_only', str(old_database))\n    \n                allure.attach(df_diff.to_html(), name='Difference between two Database tables : ' +\n                                                      str(sql_type.replace('select * from ', '')),\n                              attachment_type=allure.attachment_type.HTML)\n    \n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(old_database))\n                DataBaseConnection.close_connection(DataBaseConnection.setup_connection(new_database))\n    \n            database_data_match = '\\n'.join(data_match)\n            allure.attach(str(database_data_match), name='Database Data Match',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_tables = '\\n'.join(missing_tables)\n            allure.attach(str(missing_tables), name='Missing Tables from database',\n                          attachment_type=allure.attachment_type.TEXT)\n            missing_column = '\\n'.join(missing_column)\n            allure.attach(str(missing_column), name='Missing Column in Database table',\n                          attachment_type=allure.attachment_type.TEXT)\n            database_column_datatype = '\\n'.join(column_data_type)\n            allure.attach(str(database_column_datatype), name='Database Columns Datatype not matching',\n                          attachment_type=allure.attachment_type.TEXT)\n            if len(missing_tables) != 0:\n>               assert assert_flag, f\" {old_database} + '&' + {new_database} Database tables details are not matching\"\nE               AssertionError:  dwi_junaid + '&' + dwi_siba Database tables details are not matching\nE               assert False\n\ntests\\database\\test_db.py:179: AssertionError","steps":[],"attachments":[{"uid":"454a274de74944a3","name":"Difference Between Two Database tables : email_templates","source":"454a274de74944a3.html","type":"text/html","size":69330},{"uid":"6e1214417ef32c24","name":"Difference Between Two Database tables : databasechangelog","source":"6e1214417ef32c24.html","type":"text/html","size":22117},{"uid":"bdcb0c8b7ab2c299","name":"Database Data Match","source":"bdcb0c8b7ab2c299.txt","type":"text/plain","size":1224},{"uid":"2ca26d797890add3","name":"Missing Tables from database","source":"2ca26d797890add3.txt","type":"text/plain","size":1677},{"uid":"bae0ce44d794424","name":"Missing Column in Database table","source":"bae0ce44d794424.txt","type":"text/plain","size":373},{"uid":"e772576b54a30aa7","name":"Database Columns Datatype not matching","source":"e772576b54a30aa7.txt","type":"text/plain","size":0}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[],"labels":[{"name":"tag","value":"compare_database"},{"name":"parentSuite","value":"tests.database"},{"name":"suite","value":"test_db"},{"name":"subSuite","value":"TestDataBaseConnection"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"24236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.database.test_db"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["compare_database"]},"source":"3e75e65c12ef8d7e.json","parameterValues":[]}